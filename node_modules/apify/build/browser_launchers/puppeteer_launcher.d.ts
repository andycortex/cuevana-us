/**
 * Apify extends the launch options of Puppeteer.
 * You can use any of the Puppeteer compatible
 * [`LaunchOptions`](https://pptr.dev/#?product=Puppeteer&show=api-puppeteerlaunchoptions)
 * options by providing the `launchOptions` property.
 *
 * **Example:**
 * ```js
 * // launch a headless Chrome (not Chromium)
 * const launchContext = {
 *     // Apify helpers
 *     useChrome: true,
 *     proxyUrl: 'http://user:password@some.proxy.com'
 *     // Native Puppeteer options
 *     launchOptions: {
 *         headless: true,
 *         args: ['--some-flag'],
 *     }
 * }
 * ```
 *
 * @typedef PuppeteerLaunchContext
 * @property {Parameters<PuppeteerNode['launch']>[0]} [launchOptions]
 *  `puppeteer.launch` [options](https://pptr.dev/#?product=Puppeteer&version=v13.5.1&show=api-puppeteerlaunchoptions)
 * @property {string} [proxyUrl]
 *   URL to a HTTP proxy server. It must define the port number,
 *   and it may also contain proxy username and password.
 *
 *   Example: `http://bob:pass123@proxy.example.com:1234`.
 * @property {string} [userAgent]
 *   The `User-Agent` HTTP header used by the browser.
 *   If not provided, the function sets `User-Agent` to a reasonable default
 *   to reduce the chance of detection of the crawler.
 * @property {boolean} [useChrome=false]
 *   If `true` and `executablePath` is not set,
 *   Puppeteer will launch full Google Chrome browser available on the machine
 *   rather than the bundled Chromium. The path to Chrome executable
 *   is taken from the `APIFY_CHROME_EXECUTABLE_PATH` environment variable if provided,
 *   or defaults to the typical Google Chrome executable location specific for the operating system.
 *   By default, this option is `false`.
 * @property {*} [launcher]
 *   Already required module (`Object`). This enables usage of various Puppeteer
 *   wrappers such as `puppeteer-extra`.
 *
 *   Take caution, because it can cause all kinds of unexpected errors and weird behavior.
 *   Apify SDK is not tested with any other library besides `puppeteer` itself.
 * @property {boolean} [useIncognitoPages=false]
 *   With this option selected, all pages will be opened in a new incognito browser context.
 *   This means they will not share cookies nor cache and their resources will not be throttled by one another.
 * @property {boolean} [stealth]
 * @deprecated
 *   This setting hides most of the known properties that identify headless Chrome and makes it nearly undetectable.
 *   It is recommended to use it together with the `useChrome` set to `true`.
 * @property {StealthOptions} [stealthOptions]
 * @deprecated
 *   Using this configuration, you can disable some of the hiding tricks.
 *   For these settings to take effect `stealth` must be set to true
 */
/**
 * `PuppeteerLauncher` is based on the `BrowserLauncher`. It launches `puppeteer` browser instance.
 * @ignore
 */
export class PuppeteerLauncher extends BrowserLauncher {
    static optionsShape: {
        launcher: import("ow").ObjectPredicate<object> & import("ow").BasePredicate<object | undefined>;
        userAgent: import("ow").StringPredicate & import("ow").BasePredicate<string | undefined>;
        stealth: import("ow").BooleanPredicate & import("ow").BasePredicate<boolean | undefined>;
        stealthOptions: import("ow").ObjectPredicate<object> & import("ow").BasePredicate<object | undefined>;
        proxyUrl: import("ow").StringPredicate & import("ow").BasePredicate<string | undefined>;
        useChrome: import("ow").BooleanPredicate & import("ow").BasePredicate<boolean | undefined>;
        useIncognitoPages: import("ow").BooleanPredicate & import("ow").BasePredicate<boolean | undefined>;
        userDataDir: import("ow").StringPredicate & import("ow").BasePredicate<string | undefined>;
        launchOptions: import("ow").ObjectPredicate<object> & import("ow").BasePredicate<object | undefined>;
    };
    /**
    * @param {PuppeteerLaunchContext} launchContext
    * All `PuppeteerLauncher` parameters are passed via an launchContext object.
    */
    constructor(launchContext?: PuppeteerLaunchContext);
    userAgent: string | undefined;
    stealth: boolean;
    /** @type {StealthOptions} */
    stealthOptions: StealthOptions;
}
export function launchPuppeteer(launchContext?: PuppeteerLaunchContext | undefined): Promise<any>;
/**
 * Apify extends the launch options of Puppeteer.
 * You can use any of the Puppeteer compatible
 * [`LaunchOptions`](https://pptr.dev/#?product=Puppeteer&show=api-puppeteerlaunchoptions)
 * options by providing the `launchOptions` property.
 *
 * **Example:**
 * ```js
 * // launch a headless Chrome (not Chromium)
 * const launchContext = {
 *     // Apify helpers
 *     useChrome: true,
 *     proxyUrl: 'http://user:password@some.proxy.com'
 *     // Native Puppeteer options
 *     launchOptions: {
 *         headless: true,
 *         args: ['--some-flag'],
 *     }
 * }
 * ```
 */
export type PuppeteerLaunchContext = {
    /**
     * `puppeteer.launch` [options](https://pptr.dev/#?product=Puppeteer&version=v13.5.1&show=api-puppeteerlaunchoptions)
     */
    launchOptions?: Parameters<PuppeteerNode['launch']>[0];
    /**
     * URL to a HTTP proxy server. It must define the port number,
     * and it may also contain proxy username and password.
     *
     * Example: `http://bob:pass123@proxy.example.com:1234`.
     */
    proxyUrl?: string | undefined;
    /**
     * The `User-Agent` HTTP header used by the browser.
     * If not provided, the function sets `User-Agent` to a reasonable default
     * to reduce the chance of detection of the crawler.
     */
    userAgent?: string | undefined;
    /**
     * If `true` and `executablePath` is not set,
     * Puppeteer will launch full Google Chrome browser available on the machine
     * rather than the bundled Chromium. The path to Chrome executable
     * is taken from the `APIFY_CHROME_EXECUTABLE_PATH` environment variable if provided,
     * or defaults to the typical Google Chrome executable location specific for the operating system.
     * By default, this option is `false`.
     */
    useChrome?: boolean | undefined;
    /**
     * Already required module (`Object`). This enables usage of various Puppeteer
     * wrappers such as `puppeteer-extra`.
     *
     * Take caution, because it can cause all kinds of unexpected errors and weird behavior.
     * Apify SDK is not tested with any other library besides `puppeteer` itself.
     */
    launcher?: any;
    /**
     * With this option selected, all pages will be opened in a new incognito browser context.
     * This means they will not share cookies nor cache and their resources will not be throttled by one another.
     */
    useIncognitoPages?: boolean | undefined;
    stealth?: boolean | undefined;
};
import BrowserLauncher from "./browser_launcher";
import { StealthOptions } from "../stealth/stealth";
// @ts-ignore optional peer dependency
import { PuppeteerNode } from "puppeteer";
//# sourceMappingURL=puppeteer_launcher.d.ts.map