export function gotoExtended(page: Page, request: Request, gotoOptions?: DirectNavigationOptions | undefined): Promise<(Response | null)>;
export namespace playwrightUtils {
    export { gotoExtended };
    export { injectFile };
    export { injectJQuery };
}
import { Page } from "playwright-core";
import Request from "./request";
import { DirectNavigationOptions } from "./typedefs";
import { Response } from "playwright-core";
/**
 * Injects a JavaScript file into a Playright page.
 * Unlike Playwright's `addScriptTag` function, this function works on pages
 * with arbitrary Cross-Origin Resource Sharing (CORS) policies.
 *
 * File contents are cached for up to 10 files to limit file system access.
 *
 * @param {Page} page
 *   Playwright [`Page`](https://playwright.dev/docs/api/class-page) object.
 * @param {string} filePath File path
 * @param {object} [options]
 * @param {boolean} [options.surviveNavigations]
 *   Enables the injected script to survive page navigations and reloads without need to be re-injected manually.
 *   This does not mean, however, that internal state will be preserved. Just that it will be automatically
 *   re-injected on each navigation before any other scripts get the chance to execute.
 * @return {Promise<*>}
 * @memberOf playwright
 */
declare function injectFile(page: Page, filePath: string, options?: {
    surviveNavigations?: boolean | undefined;
} | undefined): Promise<any>;
/**
 * Injects the [jQuery](https://jquery.com/) library into a Playwright page.
 * jQuery is often useful for various web scraping and crawling tasks.
 * For example, it can help extract text from HTML elements using CSS selectors.
 *
 * Beware that the injected jQuery object will be set to the `window.$` variable and thus it might cause conflicts with
 * other libraries included by the page that use the same variable name (e.g. another version of jQuery).
 * This can affect functionality of page's scripts.
 *
 * The injected jQuery will survive page navigations and reloads.
 *
 * **Example usage:**
 * ```javascript
 * await Apify.utils.playwright.injectJQuery(page);
 * const title = await page.evaluate(() => {
 *   return $('head title').text();
 * });
 * ```
 *
 * Note that `injectJQuery()` does not affect the Playwright
 * [`page.$()`](https://playwright.dev/docs/api/class-page#page-query-selector)
 * function in any way.
 *
 * @param {Page} page
 *   Playwright [`Page`](https://playwright.dev/docs/api/class-page) object.
 * @return {Promise<*>}
 * @memberOf playwright
 */
declare function injectJQuery(page: Page): Promise<any>;
export {};
//# sourceMappingURL=playwright_utils.d.ts.map